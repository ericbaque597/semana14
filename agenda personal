import tkinter as tk
from tkinter import ttk, messagebox

# Manejar el error si tkcalendar no está instalado
try:
    from tkcalendar import DateEntry

    tkcalendar_installed = True
except ImportError:
    tkcalendar_installed = False


class AgendaApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Agenda Personal")
        self.root.geometry("500x400")

        # Frame para la entrada de datos
        frame_input = tk.Frame(self.root)
        frame_input.pack(pady=10)

        tk.Label(frame_input, text="Fecha:").grid(row=0, column=0, padx=5, pady=5)
        if tkcalendar_installed:
            self.date_entry = DateEntry(frame_input, date_pattern='yyyy-MM-dd')
        else:
            self.date_entry = tk.Entry(frame_input)
            self.date_entry.insert(0, "YYYY-MM-DD")
        self.date_entry.grid(row=0, column=1, padx=5, pady=5)

        tk.Label(frame_input, text="Hora (HH:MM):").grid(row=1, column=0, padx=5, pady=5)
        self.time_entry = tk.Entry(frame_input)
        self.time_entry.grid(row=1, column=1, padx=5, pady=5)

        tk.Label(frame_input, text="Descripción:").grid(row=2, column=0, padx=5, pady=5)
        self.desc_entry = tk.Entry(frame_input)
        self.desc_entry.grid(row=2, column=1, padx=5, pady=5)

        # Botón para agregar evento
        self.add_button = tk.Button(self.root, text="Agregar Evento", command=self.add_event)
        self.add_button.pack(pady=5)

        # TreeView para mostrar eventos
        self.tree = ttk.Treeview(self.root, columns=("Fecha", "Hora", "Descripción"), show='headings')
        self.tree.heading("Fecha", text="Fecha")
        self.tree.heading("Hora", text="Hora")
        self.tree.heading("Descripción", text="Descripción")
        self.tree.column("Fecha", width=100)
        self.tree.column("Hora", width=80)
        self.tree.column("Descripción", width=250)
        self.tree.pack(pady=10)

        # Scrollbar para el TreeView
        self.scrollbar = ttk.Scrollbar(self.root, orient="vertical", command=self.tree.yview)
        self.tree.configure(yscroll=self.scrollbar.set)
        self.scrollbar.pack(side="right", fill="y")

        # Botón para eliminar evento seleccionado
        self.del_button = tk.Button(self.root, text="Eliminar Evento", command=self.delete_event)
        self.del_button.pack(pady=5)

        # Botón para salir
        self.exit_button = tk.Button(self.root, text="Salir", command=self.root.quit)
        self.exit_button.pack(pady=5)

    def add_event(self):
        date = self.date_entry.get()
        time = self.time_entry.get().strip()
        desc = self.desc_entry.get().strip()

        if not date or not time or not desc:
            messagebox.showwarning("Advertencia", "Todos los campos deben estar llenos")
            return

        if not self.validate_time_format(time):
            messagebox.showerror("Error", "Formato de hora incorrecto. Use HH:MM")
            return

        self.tree.insert("", "end", values=(date, time, desc))
        self.time_entry.delete(0, tk.END)
        self.desc_entry.delete(0, tk.END)

    def delete_event(self):
        selected_item = self.tree.selection()
        if not selected_item:
            messagebox.showwarning("Advertencia", "Seleccione un evento para eliminar")
            return
        confirm = messagebox.askyesno("Confirmación", "¿Seguro que desea eliminar este evento?")
        if confirm:
            for item in selected_item:
                self.tree.delete(item)

    def validate_time_format(self, time_str):
        """Valida que la hora esté en formato HH:MM."""
        try:
            hours, minutes = map(int, time_str.split(":"))
            return 0 <= hours < 24 and 0 <= minutes < 60
        except ValueError:
            return False


if __name__ == "__main__":
    root = tk.Tk()
    app = AgendaApp(root)
    root.mainloop()
